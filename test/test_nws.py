#!/usr/bin/env jython

# This is a quick port of one of the Python NWS test programs using Jython.
# Probably a little more thought should be put into it.

import unittest, time
from com.sca.nws import *
from java.util import NoSuchElementException
from java.lang import IllegalArgumentException

try:
    from logging import getLogger, basicConfig, DEBUG
except ImportError:
    DEBUG = 1
    class Logger:
        def __init__(self):
            self._level = 0

        def info(self, msg):
            if self._level:
                print msg

        def setLevel(self, level):
            self._level = level

    def getLogger(ign):
        return Logger()

    def basicConfig():
        pass

def getdict(**kw):
    return kw

class NWSTest(unittest.TestCase):
    log = getLogger('NWSTest')
    wsname = 'unit test ws'

    def setUp(self):
        self.log.info('Setting up')
        self.ws = NetWorkSpace(self.wsname)

    def tearDown(self):
        self.log.info('Tearing down')
        try: self.ws.getNwsServer().close()
        except: pass

    # Get a list of all workspaces from a listing string generated by
    # the listWss method.
    def getWss(self, listing):
        x = {}
        self.assertEqual(listing[-1], '\n')
        listing = listing[:-1]
        for line in listing.split('\n'):
            t = line.split('\t')
            self.assertEqual(len(t), 5)
            self.assert_(len(t[0]) > 1)
            if t[0][0] == '>':
                mine = 1
            else:
                self.assertEqual(t[0][0], ' ')
                mine = 0
            name = t[0][1:]
            owner = t[1]
            if t[2] == 'True':
                persistent = 1
            else:
                self.assertEqual(t[2], 'False')
                persistent = 0
            nvars = int(t[3])
            self.assert_(nvars >= 0)
            if t[4]:
                vars = t[4].split(',')
            else:
                vars = []
            self.assertEqual(nvars, len(vars))
            x[name] = getdict(name=name, mine=mine, owner=owner,
                    persistent=persistent, nvars=nvars, vars=vars)

        return x

    # Get a list of all variables from a listing string generated by
    # the listVars method.
    def getVars(self, listing):
        x = {}
        if listing:
            self.assert_(listing[-1] != '\n')
            lines = listing.split('\n')
            for line in lines:
                t = line.split('\t')
                self.assertEqual(len(t), 5)
                self.assert_(len(t[0]) > 0)
                variable = t[0]
                values = int(t[1])
                fetchers = int(t[2])
                finders = int(t[3])
                mode = t[4]
                x[variable] = getdict(variable=variable, values=values,
                        fetchers=fetchers, finders=finders, mode=mode)

        return x

    def getVarsDict(self, varDict):
        x = {}
        for k in varDict:
            v = varDict[k]
            x[v[V_VARIABLE]] = getdict(variable=v[V_VARIABLE], values=v[V_VALUES],
                    fetchers=v[V_FETCHERS], finders=v[V_FINDERS], mode=v[V_MODE])

        return x

    def testFifo(self):
        """A basic test of using a fifo mode variable"""
        values = range(10)

        self.log.info('Storing variables in FIFO mode')
        for i in values:
            self.ws.store('FIFO', i)

        self.log.info('Fetching values for FIFO variable')
        for i in values:
            t = self.ws.fetchTry('FIFO')
            self.assertEqual(t, i)

        self.assertEqual(self.ws.fetchTry('FIFO'), None)

    def testLifo(self):
        """A basic test of using a lifo mode variable"""
        self.ws.declare('LIFO', NetWorkSpace.LIFO)
        values = range(10)

        self.log.info('Storing variables in LIFO mode')
        for i in values:
            self.ws.store('LIFO', i)

        self.log.info('Fetching values for LIFO variable')
        values.reverse()
        for i in values:
            t = self.ws.fetchTry('LIFO')
            self.assertEqual(t, i)

        self.assertEqual(self.ws.fetchTry('LIFO'), None)

    def testSingle(self):
        """A basic test of using a single mode variable"""
        self.ws.declare('SINGLE', NetWorkSpace.SINGLE)
        values = range(10)

        self.log.info('Storing variables in SINGLE mode')
        for i in values:
            self.ws.store('SINGLE', i)

        self.log.info('Fetching values for SINGLE variable')
        self.assertEqual(self.ws.fetchTry('SINGLE'), values[-1])

        for i in values:
            self.assertEqual(self.ws.fetchTry('SINGLE'), None)

    def testCurrentWs(self):
        """Test the output of the getWsName method"""
        wsname = self.ws.getWsName()
        self.assertEqual(self.wsname, wsname)

    def testUseUseTrue(self):
        """Test setting useUse to True"""
        opts = NwsOptions()
        opts.useUse = 1
        usews = NetWorkSpace(self.wsname, opts)
        val = 42
        self.ws.store('foo', val)
        self.assertEqual(usews.fetch('foo'), val)

    def testUseUseFalse(self):
        """Test that explicitly setting useUse=0 works"""
        opts = NwsOptions()
        opts.useUse = 0
        usews = NetWorkSpace(self.wsname + ' 2', opts)
        val = 7
        usews.store('bar', val)
        self.assertEqual(usews.findTry('bar'), val)
        self.assertEqual(usews.fetch('bar'), val)

    def testConstants(self):
        """Test the value of the mode constants"""
        self.assertEqual(NetWorkSpace.FIFO, 'fifo')
        self.assertEqual(NetWorkSpace.LIFO, 'lifo')
        self.assertEqual(NetWorkSpace.MULTI, 'multi')
        self.assertEqual(NetWorkSpace.SINGLE, 'single')

    def testDeleteWs(self):
        """Test deleting a workspace using deleteWs"""
        host = self.ws.getNwsServer().getHost()
        port = self.ws.getNwsServer().getPort()
        server = NwsServer(host, port)
        self.log.info('Deleting workspace %s' % repr(self.wsname))
        server.deleteWs(self.wsname)
        self.assertRaises(NwsOperationException, self.ws.store, 'fail', 0)

    def testListWss(self):
        """Test output from listWss"""
        wss = self.getWss(self.ws.getNwsServer().listWss())
        self.assert_(wss.has_key('__default'))
        n = 0
        for k, v in wss.items():
            if v['mine']:
                n += 1
        self.assertEqual(n, 1)
        self.assert_(wss[self.wsname]['mine'])

    def testPersistent(self):
        """Test creation of persistent workspace"""
        wsname = 'persistent'
        opts = NwsOptions()
        opts.persistent = 1
        t = NetWorkSpace(wsname, opts)
        try:
            wss = self.getWss(self.ws.getNwsServer().listWss())
            self.assert_(wss.has_key(wsname))
            self.assert_(wss[wsname]['persistent'])
            t.getNwsServer().close()

            # give the server a chance to notice that the connection was
            # dropped
            time.sleep(1)
            wss = self.getWss(self.ws.getNwsServer().listWss())
            self.assert_(wss.has_key(wsname))
            self.assert_(wss[wsname]['persistent'])
        finally:
            self.ws.getNwsServer().deleteWs(wsname)

        wss = self.getWss(self.ws.getNwsServer().listWss())
        self.assert_(not wss.has_key(wsname))

    def testNonPersistent(self):
        """Test creation of non-persistent workspace"""
        wsname = 'non-persistent'
        opts = NwsOptions()
        opts.persistent = 0
        t = NetWorkSpace(wsname, opts)
        wss = self.getWss(self.ws.getNwsServer().listWss())
        self.assert_(wss.has_key(wsname))
        self.assert_(not wss[wsname]['persistent'])
        t.getNwsServer().close()

        # give the server a chance to notice that the connection was
        # dropped
        time.sleep(1)
        wss = self.getWss(self.ws.getNwsServer().listWss())
        self.assert_(not wss.has_key(wsname))

    def testMktempWs(self):
        """Test mktempWs"""
        self.log.info('calling mktempWs incorrectly...')
        self.assertRaises(NwsOperationException, self.ws.getNwsServer().mktempWs, 'foo')

        self.log.info('calling mktempWs incorrectly again...')
        self.assertRaises(NwsOperationException, self.ws.getNwsServer().mktempWs, 'foo')

        self.log.info('calling mktempWs a third time...')
        t = self.ws.getNwsServer().mktempWs('foo%d')
        self.assert_(t.startswith('foo'))
        self.log.info('mktempWs returned: ' + t)
        # must explicitly delete, because nobody owns it
        self.ws.getNwsServer().deleteWs(t)

    def XXXtestListVars(self):
        """Test listVars"""
        expected = {
            'foo': getdict(variable='foo', values=1, fetchers=0, finders=0, mode=NetWorkSpace.SINGLE),
            'bar': getdict(variable='bar', values=2, fetchers=0, finders=0, mode=NetWorkSpace.MULTI),
            'baz': getdict(variable='baz', values=1, fetchers=0, finders=0, mode=NetWorkSpace.LIFO),
            'buz': getdict(variable='buz', values=0, fetchers=0, finders=0, mode=NetWorkSpace.FIFO),
            'bif': getdict(variable='bif', values=0, fetchers=0, finders=0, mode=NetWorkSpace.LIFO),
        }

        self.ws.declare('foo', NetWorkSpace.SINGLE)
        self.ws.store('foo', 'hello, world')
        self.ws.store('foo', 'goodbye, world')
        self.ws.store('foo', 0)
        self.ws.store('foo', 222)
        self.ws.declare('bar', NetWorkSpace.MULTI)
        self.ws.store('bar', 'spam')
        self.ws.store('bar', 'spam')
        self.ws.declare('baz', NetWorkSpace.LIFO)
        self.ws.store('baz', 'eggs')
        self.ws.store('buz', 100)
        self.ws.fetchTry('buz')
        self.ws.declare('bif', NetWorkSpace.LIFO)

        actual = self.getVars(self.ws.listVars())
        self.assertEqual(actual, expected)
        actual2 = self.getVarsDict(self.ws.listVars(format=DICT))
        self.assertEqual(actual2, expected)

        # now delete foo and bif
        self.ws.deleteVar('foo')
        self.ws.deleteVar('bif')
        del expected['foo']
        del expected['bif']
        actual = self.getVars(self.ws.listVars())
        self.assertEqual(actual, expected)
        actual2 = self.getVarsDict(self.ws.listVars(format=DICT))
        self.assertEqual(actual2, expected)

        # now delete baz
        self.ws.deleteVar('baz')
        del expected['baz']
        actual = self.getVars(self.ws.listVars())
        self.assertEqual(actual, expected)
        actual2 = self.getVarsDict(self.ws.listVars(format=DICT))
        self.assertEqual(actual2, expected)

        # now try the same thing again
        actual = self.getVars(self.ws.listVars())
        self.assertEqual(actual, expected)

        # now try to redeclare bar and buz
        self.assertRaises(NwsDeclarationFailedException, self.ws.declare, 'bar', NetWorkSpace.FIFO)
        self.assertRaises(NwsDeclarationFailedException, self.ws.declare, 'buz', NetWorkSpace.SINGLE)
        actual = self.getVars(self.ws.listVars())
        self.assertEqual(actual, expected)
        actual2 = self.getVarsDict(self.ws.listVars(format=DICT))
        self.assertEqual(actual2, expected)

        # now delete bar and buz
        self.ws.deleteVar('bar')
        self.ws.deleteVar('buz')
        del expected['bar']
        del expected['buz']
        actual = self.getVars(self.ws.listVars())
        self.assertEqual(actual, expected)
        actual2 = self.getVarsDict(self.ws.listVars(format=DICT))
        self.assertEqual(actual2, expected)
        self.assertEqual(len(actual), 0)
        self.assertEqual(len(actual2), 0)
        self.assertEqual(len(expected), 0)

    def testEmptyString(self):
        """Test that empty strings are handled correctly"""
        self.ws.store('Empty', '')
        self.assertEqual(self.ws.fetch('Empty'), '')
        self.assertEqual(self.ws.fetchTry('Empty'), None)

    def testDeclare(self):
        """Test variable declaration"""
        self.ws.declare('FIFO', NetWorkSpace.FIFO)
        self.assertRaises(NwsDeclarationFailedException, self.ws.declare, 'FIFO', NetWorkSpace.SINGLE)
        self.assertRaises(NwsDeclarationFailedException, self.ws.declare, 'FIFO', NetWorkSpace.LIFO)
        self.assertRaises(NwsDeclarationFailedException, self.ws.declare, 'FIFO', NetWorkSpace.MULTI)
        self.assertRaises(IllegalArgumentException, self.ws.declare, 'FIFO', 'garbage')

    def testIfind(self):
        """Test ifind"""
        # XXX not a great test because it never blocks
        for i in range(10):
            self.ws.store('ifind', i)
        it = self.ws.ifind('ifind')
        self.assertEqual([it.next() for i in range(10)], range(10))
        for i in range(10):
            self.ws.store('ifind', i + 10)
        self.assertEqual([it.next() for i in range(10)], range(10, 20))
        it.reset()
        self.assertEqual([it.next() for i in range(20)], range(20))
        self.ws.deleteVar('ifind')
        self.assertRaises(NoSuchElementException, it.next)
        # self.assertEqual(list(it), [])

    def testIfetch(self):
        """Test ifetch"""
        # XXX not a great test because it never blocks
        for i in range(10):
            self.ws.store('ifetch', i)
        it = self.ws.ifetch('ifetch')
        self.assertEqual([it.next() for i in range(10)], range(10))
        for i in range(10):
            self.ws.store('ifetch', i + 10)
        self.assertEqual([it.next() for i in range(10)], range(10, 20))
        self.ws.deleteVar('ifetch')
        self.assertRaises(NoSuchElementException, it.next)
        # self.assertEqual(list(it), [])

if __name__ == '__main__':
    import sys, os

    nwsargs = {}
    try: nwsargs['serverHost'] = os.environ['NWS_HOST']
    except: pass
    try: nwsargs['serverPort'] = int(os.environ['NWS_PORT'])
    except: pass
    verbose = 0

    basicConfig()
    log = getLogger('NWSTest')
    if verbose:
        log.setLevel(DEBUG)

    unittest.main()
